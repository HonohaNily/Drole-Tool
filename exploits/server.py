"""
Server information module for MineScan
Retrieves and displays Minecraft server information
"""

import socket
from typing import Dict, List, Optional
from mcstatus import JavaServer
from colorama import Fore, Style

class ServerInfoChecker:
    """Retrieves and displays Minecraft server information"""
    
    def __init__(self, timeout: int = 5):
        self.timeout = timeout
    
    def check_server(self, server_addr: str) -> bool:
        """Check a single server and display its information"""
        try:
            # Parse server address
            parts = server_addr.split(':')
            host = parts[0]
            port = int(parts[1]) if len(parts) > 1 else 25565
            
            # Connect to server
            server = JavaServer(host, port)
            status = server.status()
            
            # Display server info with styling
            print(f"{Fore.RED}IP{Fore.RESET}:{Fore.WHITE}Port{Fore.RESET} {host}:{port}")
            
            # Display MOTD (Message of the Day)
            motd = status.description
            if isinstance(motd, dict) and 'text' in motd:
                motd = motd['text']
            print(f"{Fore.RED}MOTD{Fore.RESET}   {Fore.MAGENTA}{Style.BRIGHT}{motd}{Style.RESET_ALL}")
            
            # Display version info
            version_name = status.version.name
            print(f"{Fore.RED}Version{Fore.RESET} {Fore.MAGENTA}{Style.BRIGHT}{version_name}{Style.RESET_ALL}")
            
            # Display protocol version
            protocol = status.version.protocol
            print(f"{Fore.RED}Protcol{Fore.RESET} {Fore.MAGENTA}{Style.BRIGHT}{protocol}{Style.RESET_ALL}")
            
            # Display player count
            players = f"{status.players.online}/{status.players.max}"
            print(f"{Fore.RED}Connected{Fore.RESET} {Fore.MAGENTA}{Style.BRIGHT}{players}{Style.RESET_ALL}")
            
            print("")  # Add blank line between servers
            return True
            
        except Exception as e:
            print(f"{Fore.RED}Error checking {server_addr}: {str(e)}{Fore.RESET}")
            return False
    
    def check_servers_from_file(self, file_path: str) -> int:
        """Check servers from a file with one address per line"""
        try:
            with open(file_path, 'r') as f:
                servers = [line.strip() for line in f if line.strip()]
            
            if not servers:
                print(f"{Fore.RED}No server addresses found in file{Fore.RESET}")
                return 0
            
            print(f"Checking {len(servers)} servers...")
            success_count = 0
            
            for server_addr in servers:
                if self.check_server(server_addr):
                    success_count += 1
            
            return success_count
        
        except Exception as e:
            print(f"{Fore.RED}Error reading file: {str(e)}{Fore.RESET}")
            return 0
    
    def check_servers_from_input(self) -> int:
        """Check servers from manual input"""
        servers = []
        
        print("Enter server addresses (one per line, blank line to finish):")
        while True:
            try:
                line = input()
                if not line:
                    break
                servers.append(line.strip())
            except EOFError:
                break
        
        if not servers:
            print(f"{Fore.RED}No server addresses provided{Fore.RESET}")
            return 0
        
        print(f"Checking {len(servers)} servers...")
        success_count = 0
        
        for server_addr in servers:
            if self.check_server(server_addr):
                success_count += 1
        
        return success_count