"""
RCON exploitation module for MineScan
Handles RCON authentication testing and exploitation
"""

import socket
import struct
import time
from typing import Optional, Tuple

class RCONExploit:
    """Handles RCON protocol exploitation"""

    def __init__(self, host: str, port: int = 25575, timeout: int = 3):
        self.host = host
        self.port = port
        self.timeout = timeout

    def test_rcon_auth(self) -> Tuple[bool, Optional[str]]:
        """Test RCON authentication security"""

        # Common weak passwords to test
        weak_passwords = [
            "minecraft",
            "admin",
            "password",
            "server",
            "123456",
            ""
        ]

        try:
            # First check if RCON port is open
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            result = sock.connect_ex((self.host, self.port))
            sock.close()

            if result != 0:
                return False, "RCON port closed (secure)"

            # Test passwords if port is open
            for password in weak_passwords:
                if self._try_rcon_auth(password):
                    return True, f"Weak RCON password found: {password}"

            return False, "RCON authentication secure"

        except socket.timeout:
            return False, "Connection timeout (RCON likely disabled)"
        except ConnectionRefusedError:
            return False, "Connection refused (RCON likely disabled)"
        except Exception as e:
            return False, f"Error testing RCON: {str(e)}"

    def _try_rcon_auth(self, password: str) -> bool:
        """Attempt RCON authentication with given password"""
        try:
            # Create socket with shorter timeout for auth attempts
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(self.timeout)
            sock.connect((self.host, self.port))

            # Send auth packet
            packet = self._create_rcon_packet(
                request_id=1,
                packet_type=3,  # SERVERDATA_AUTH
                payload=password
            )
            sock.send(packet)

            # Receive response with timeout
            try:
                response = sock.recv(4096)
                request_id = struct.unpack('<i', response[:4])[0]
                sock.close()
                return request_id == 1
            except socket.timeout:
                sock.close()
                return False

        except Exception:
            return False

    def _create_rcon_packet(self, request_id: int, packet_type: int, payload: str) -> bytes:
        """Create an RCON packet"""
        payload_bytes = payload.encode('utf8')
        packet_length = len(payload_bytes) + 10

        return struct.pack(
            '<iii',  # little-endian, 3 integers
            packet_length,  # Length
            request_id,     # Request ID
            packet_type     # Packet type
        ) + payload_bytes + b'\x00\x00'  # Payload + null terminators